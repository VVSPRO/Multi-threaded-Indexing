package org.apache.lucene.demo;

/**
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import org.apache.lucene.analysis.standard.StandardAnalyzer;
import org.apache.lucene.index.IndexWriter;
import org.apache.lucene.store.FSDirectory;
import org.apache.lucene.util.Version;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.Date;
public class IndexFiles2 extends Thread{
    //String args[];
	String path;
	File INDEX_D,d;
	  private IndexFiles2(String s, File d) {
		  path=s;
		  INDEX_D=d;
	  }

	  static final File INDEX_DIR = new File("index");
	  static final File INDEX_DIR1 = new File("index1");
	  static final File INDEX_DIR2 = new File("index2");
	  static final File INDEX_DIR3 = new File("index3");
	  static final File INDEX_DIR4 = new File("index4");
	  
	  /** Index all text files under a directory. */
	  public void run(){
		  //String args[] = arg1;
		  //public static void main(String[] args) {
				/*  	
			    String usage = "java org.apache.lucene.demo.IndexFiles <root_directory>";
			    if (args.length == 0) {
			      System.err.println("Usage: " + usage);
			      System.exit(1);
			    }
			   */
			    if (INDEX_D.exists()) {
			      System.out.println("Cannot save index to '" +INDEX_D+ "' directory, please delete it first");
			      System.exit(1);
			    }
			    
			    final File docDir = new File(path);
			    if (!docDir.exists() || !docDir.canRead()) {
			      System.out.println("Document directory '" +docDir.getAbsolutePath()+ "' does not exist or is not readable, please check the path");
			      System.exit(1);
			    }
			    
			    Date start = new Date();
			 
			    try {
			      IndexWriter writer = new IndexWriter(FSDirectory.open(INDEX_D), new StandardAnalyzer(Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);
			      
			      System.out.println("Indexing to directory '" +INDEX_D+ "'...");
			      indexDocs(writer, docDir);
			      
			      System.out.println("Optimizing...");
			      writer.optimize();
			      writer.close();

			      Date end = new Date();
			      System.out.println(end.getTime() - start.getTime() + " total milliseconds");

			    } catch (IOException e) {
			      System.out.println(" caught a " + e.getClass() +
			       "\n with message: " + e.getMessage());
			    }
			       
		  
	  }
	  public static void main(String args[]){
		  String s="E:/projecttrial/p";
		  String s1="E:/projecttrial/p1";
		  String s2="E:/projecttrial/p2";
		  String s3="E:/projecttrial/p3";
		  String s4="E:/projecttrial/p4";
		  
		  IndexFiles2 a= new IndexFiles2(s,INDEX_DIR);
		  IndexFiles2 a1= new IndexFiles2(s1,INDEX_DIR1);
		  IndexFiles2 a2= new IndexFiles2(s2,INDEX_DIR2);
		  IndexFiles2 a3= new IndexFiles2(s3,INDEX_DIR3);
		  IndexFiles2 a4= new IndexFiles2(s4,INDEX_DIR4);
		  
		 
		  // args1="C:/Users/dell/Desktop/files"
		  a.start();	
		  a1.start();	
		  a2.start();	
		  a3.start();	
		  a4.start();	
		  }	
	  

	  static void indexDocs(IndexWriter writer, File file) 
	  throws IOException{
	    // do not try to index files that cannot be read
	    if (file.canRead()) {
	      if (file.isDirectory()) {
	        String[] files = file.list();
	        // an IO error could occur
	        if (files != null) {
	          for (int i = 0; i < files.length; i++) {
	            indexDocs(writer, new File(file, files[i]));
	          } 
	        }
	      } else {
	        System.out.println("adding " + file);
	       try {
	          writer.addDocument(FileDocument.Document(file));
	        }
	        // at least on windows, some temporary files raise this exception with an "access denied" message
	        // checking if the file can be read doesn't help
	        catch (FileNotFoundException fnfe) {
	          ;
	        }
	      }
	    }
	  }
	  
	}

